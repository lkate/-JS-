1、题目描述

找出元素 item 在给定数组 arr 中的位置 
输出描述:
如果数组中存在 item，则返回元素在数组中的位置，否则返回 -1

输入例子:
indexOf([ 1, 2, 3, 4 ], 3)

输出例子:
2
代码：
[javascript] view plain copy
function indexOf(arr, item) {  
                var index=-1;  
                for(var i=0;i<arr.length;i++){  
                    if(arr[i]==item)  
                        index=i;  
                     }  
                     return index;  
                }  
2、题目描述

计算给定数组 arr 中所有元素的总和 
输入描述:
数组中的元素均为 Number 类型


输入例子:
sum([ 1, 2, 3, 4 ])

输出例子:
10
代码：
[javascript] view plain copy
function sum(arr) {  
                  var sum=0;  
                  for(var i=0;i<arr.length;i++)  
                    sum+=arr[i];  
                  return sum;  
}  

3、题目描述

移除数组 arr 中的所有值与 item 相等的元素。不要直接修改数组 arr，结果返回新的数组 
输入例子:
remove([1, 2, 3, 4, 2], 2)

输出例子:
[1, 3, 4]
代码：

[javascript] view plain copy
function remove(arr, item) {  
                var newarr=[];  
                for(var i=0;i<arr.length;i++){  
                    if(arr[i]!=item)  
                        newarr.push(arr[i]);  
                }  
                return newarr;  
}  


4、题目描述
移除数组 arr 中的所有值与 item 相等的元素，直接在给定的 arr 数组上进行操作，并将结果返回 
输入例子:
removeWithoutCopy([1, 2, 2, 3, 4, 2, 2], 2)

输出例子:
[1, 3, 4]
代码：

[javascript] view plain copy
function removeWithoutCopy(arr, item) {  
                for(var i=0;i<arr.length;i++){  
                    if(arr[i]==item){  
                        arr.splice(i,1);  
                        i--;  
                    }  
                }  
            return arr;  
}  

5、题目描述

在数组 arr 末尾添加元素 item。不要直接修改数组 arr，结果返回新的数组 
输入例子:
append([1, 2, 3, 4],  10)

输出例子:
[1, 2, 3, 4, 10]
代码：

[javascript] view plain copy
function append(arr, item) {  
                var newarr=[];  
                for(var i=0;i<arr.length;i++){  
                    newarr.push(arr[i]);  
                }  
                newarr[arr.length]=item;  
                return newarr;  
}  

6、题目描述

删除数组 arr 最后一个元素。不要直接修改数组 arr，结果返回新的数组 
输入例子:
truncate([1, 2, 3, 4])

输出例子:
[1, 2, 3]
代码：

[javascript] view plain copy
function truncate(arr) {  
                newarr=[];  
                for(var i=0;i<arr.length-1;i++){  
                    newarr.push(arr[i]);  
                }  
                return newarr;  
}  

7、题目描述

在数组 arr 开头添加元素 item。不要直接修改数组 arr，结果返回新的数组 
输入例子:
prepend([1, 2, 3, 4], 10)

输出例子:
[10, 1, 2, 3, 4]
代码：

[javascript] view plain copy
function prepend(arr, item) {  
    var newarr=[];  
    newarr[0]=item;  
    for(var i=0;i<arr.length;i++){  
        newarr.push(arr[i]);  
    }  
    return newarr;  
}  

8、题目描述

删除数组 arr 第一个元素。不要直接修改数组 arr，结果返回新的数组 
输入例子:
curtail([1, 2, 3, 4])

输出例子:
[2, 3, 4]
代码：

[javascript] view plain copy
function curtail(arr) {  
    var newarr=[];  
    for(var i=1;i<arr.length;i++){  
        newarr.push(arr[i]);  
    }  
    return newarr;  
}  

9、题目描述

合并数组 arr1 和数组 arr2。不要直接修改数组 arr，结果返回新的数组 
输入例子:
concat([1, 2, 3, 4], ['a', 'b', 'c', 1])

输出例子:
[1, 2, 3, 4, 'a', 'b', 'c', 1]
代码：

[javascript] view plain copy
function concat(arr1, arr2) {  
    var newarr=[];  
    for(var i=0;i<arr1.length;i++)  
        newarr.push(arr1[i]);  
    for(var i=0;i<arr2.length;i++)  
        newarr.push(arr2[i]);  
    return newarr;  
}  

10、题目描述

在数组 arr 的 index 处添加元素 item。不要直接修改数组 arr，结果返回新的数组 
输入例子:
insert([1, 2, 3, 4], 'z', 2)

输出例子:
[1, 2, 'z', 3, 4]
代码：

[javascript] view plain copy
function insert(arr, item, index) {  
    var newarr=[];  
    for(var i=0;i<arr.length;i++){  
        newarr.push(arr[i]);  
    }  
    newarr.splice(index,0,item);  
    return newarr;  
}  

11、题目描述

统计数组 arr 中值等于 item 的元素出现的次数 
输入例子:
count([1, 2, 4, 4, 3, 4, 3], 4)

输出例子:
3
代码：

[javascript] view plain copy
function count(arr, item) {  
    var times=0;  
    for(var i=0;i<arr.length;i++){  
        if(arr[i]==item){  
            times++;  
        }  
    }  
    return times;  
}  

12、题目描述

找出数组 arr 中重复出现过的元素 
输入例子:
duplicates([1, 2, 4, 4, 3, 3, 1, 5, 3]).sort()

输出例子:
[1, 3, 4]
代码：

[javascript] view plain copy
function duplicates(arr) {  
    var re=[];  
    arr.sort();  
    for(var i=1;i<arr.length;i++){  
        if(arr[i]==arr[i-1] && re.indexOf(arr[i])==-1){  
            re.push(arr[i]);  
        }  
    }  
    return re;  
}  
13、题目描述

为数组 arr 中的每个元素求二次方。不要直接修改数组 arr，结果返回新的数组 
输入例子:
square([1, 2, 3, 4])

输出例子:
[1, 4, 9, 16]
代码：

[javascript] view plain copy
function square(arr) {  
    var newarr=[];  
    for(var i=0;i<arr.length;i++){  
        newarr[i]=arr[i]*arr[i];  
    }  
    return newarr;  
}  

14、题目描述

在数组 arr 中，查找值与 item 相等的元素出现的所有位置 
输入例子:
findAllOccurrences('abcdefabc'.split(''), 'a').sort()

输出例子:
[0, 6]
代码：

[javascript] view plain copy
function findAllOccurrences(arr, target) {  
    var currences=[];  
    for(var i=0;i<arr.length;i++){  
        if(arr[i]==target){  
            currences.push(i);  
        }  
    }  
    return currences;  
}  

15、题目描述

给定的 js 代码中存在全局变量，请修复（在变量前加上var 即可）
[javascript] view plain copy
function globals() {  
   <span style="color:#ff0000;"> var</span> myObject = {  
      name : 'Jory'  
    };  
  
    return myObject;  
}  

16、题目描述

请修复给定的 js 代码中，函数定义存在的问题 
输入例子:
functions(true)

输出例子:
a
代码：

[javascript] view plain copy
function functions(flag) {  
    if (flag) {  
      var getValue=function() { return 'a'; }  
    } else {  
      var getValue=function() { return 'b'; }  
    }  
  
    return getValue();  
}  

17、题目描述

修改 js 代码中 parseInt 的调用方式，使之通过全部测试用例 
输入例子:
parse2Int('12'); parse2Int('12px'); parse2Int('0x12')

输出例子:
12; 12; 0
代码：

[javascript] view plain copy
function parse2Int(num) {  
    return parseInt(num,10);  
}  

18、题目描述

判断 val1 和 val2 是否完全等同
代码：

[javascript] view plain copy
function identity(val1, val2) {  
    return val1 === val2 ;  
}  

19、题目描述

实现一个打点计时器，要求
1、从 start 到 end（包含 start 和 end），每隔 100 毫秒 console.log 一个数字，每次数字增幅为 1
2、返回的对象中需要包含一个 cancel 方法，用于停止定时操作
3、第一个数需要立即输出
代码：

[javascript] view plain copy
function count(start,end){  
    console.log(start);  
    var counter;  
    counter=setInterval(function(){  
        if(start<end){  
            console.log(++start);  
            }  
        },100);  
    var obj=new Object();  
    obj.cancel=function(){  
        clearInterval(counter);  
    }  
    return obj;  
}  

20、题目描述

实现 fizzBuzz 函数，参数 num 与返回值的关系如下：
1、如果 num 能同时被 3 和 5 整除，返回字符串 fizzbuzz
2、如果 num 能被 3 整除，返回字符串 fizz
3、如果 num 能被 5 整除，返回字符串 buzz
4、如果参数为空或者不是 Number 类型，返回 false
5、其余情况，返回参数 num 
输入例子:
fizzBuzz(15)

输出例子:
fizzbuzz
代码：

[javascript] view plain copy
function fizzBuzz(num) {  
    var str="";  
    if(typeof(num)=="number"){  
        if(num%3==0)  
            str+="fizz";  
        if(num%5==0)  
            str+="buzz";  
        if(num%3!=0 && num%5!=0)  
            str=num;  
        return str;  
        }else return false;  
}  
21、题目描述

将数组 arr 中的元素作为调用函数 fn 的参数 
输入例子:
argsAsArray(function (greeting, name, punctuation) {return greeting + ', ' + name + (punctuation || '!');}, ['Hello', 'Ellie', '!'])

输出例子:
Hello, Ellie!
代码：
 function argsAsArray(fn, arr) {
		 	return fn.apply(this,arr);
}
22、题目描述

将函数 fn 的执行上下文改为 obj 对象 
输入例子:
speak(function () {return this.greeting + ', ' + this.name + '!!!';}, {greeting: 'Hello', name: 'Rebecca'})

输出例子:
Hello, Rebecca!!!
代码：

function speak(fn, obj) {
			return fn.apply(obj,arguments);
}

23、题目描述

实现函数 functionFunction，调用之后满足如下条件：
1、返回值为一个函数 f
2、调用返回的函数 f，返回值为按照调用顺序的参数拼接，拼接字符为英文逗号加一个空格，即 ', '
3、所有函数的参数数量为 1，且均为 String 类型 
输入例子:
functionFunction('Hello')('world')

输出例子:
Hello, world
代码：

function functionFunction(str) {
   			var f=function(str2){
   				if(typeof(str)=="string" && typeof(str2)=="string")
   					return str+', '+str2;//2、返回值
   				else return false;
   			};
   			return f;//1、返回函数f
			}

24、题目描述

实现函数 makeClosures，调用之后满足如下条件：
1、返回一个函数数组 result，长度与 arr 相同
2、运行 result 中第 i 个函数，即 result[i]()，结果与 fn(arr[i]) 相同 
输入例子:
var arr = [1, 2, 3]; var square = function (x) { return x * x; }; var funcs = makeClosures(arr, square); funcs[1]();

输出例子:
4
代码：

function makeClosures(arr, fn) {
   			var result = [];//声明要返回的数组result
 			for(var i=0;i<arr.length;i++){//数组result的长度与arr的长度相同
 				result[i]=fun(i);//数组的值为函数fun的返回值
 			}
 			function fun(i){//定义函数fun
 				return function(){//函数fun返回给数组result的值为一个匿名函数
 					return fn(arr[i]);//这个匿名函数的返回值为fn(arr[i])
 				}
 			}
 	    	return result;
}
25、题目描述

已知函数 fn 执行需要 3 个参数。请实现函数 partial，调用之后满足如下条件：
1、返回一个函数 result，该函数接受一个参数
2、执行 result(str3) ，返回的结果与 fn(str1, str2, str3) 一致 
输入例子:
var sayIt = function(greeting, name, punctuation) {     return greeting + ', ' + name + (punctuation || '!'); };  partial(sayIt, 'Hello', 'Ellie')('!!!');

输出例子:
Hello, Ellie!!!
代码：

function partial(fn, str1, str2) {
	function result(str3){
		return fn(str1,str2,str3);
	}
	return result;
}
26、题目描述

函数 useArguments 可以接收 1 个及以上的参数。请实现函数 useArguments，返回所有调用参数相加后的结果。本题的测试参数全部为 Number 类型，不需考虑参数转换。 
输入例子:
useArguments(1, 2, 3, 4)

输出例子:
10
代码：

function useArguments() {
		var sum=0;
		for(var i=0;i<arguments.length;i++)
			sum+=arguments[i];
		return sum;
	}
27、题目描述

实现函数 callIt，调用之后满足如下条件
1、返回的结果为调用 fn 之后的结果
2、fn 的调用参数为 callIt 的第一个参数之后的全部参数 
输入例子:
var a = 1; var b = 2; var test = function (first, second) { return first === a && second === b;}; callIt(test, a, b);

输出例子:
true
代码：
function callIt(fn) {
		var args=[];
		for(var i=1;i<arguments.length;i++)
			args.push(arguments[i]);
		var result=fn.apply(null,args);
		return result;
	}
或者
function callIt(fn) {
		return fn.apply(null,Array.prototype.slice.call(arguments,1));
	}
28、题目描述

实现函数 partialUsingArguments，调用之后满足如下条件：
1、返回一个函数 result
2、调用 result 之后，返回的结果与调用函数 fn 的结果一致
3、fn 的调用参数为 partialUsingArguments 的第一个参数之后的全部参数以及 result 的调用参数 
输入例子:
var a = 1; var b = 2; var c = 3; var d = 4;var test = function (first, second, third, forth) {return first + second + third + forth;};partialUsingArguments(test, a, b)(c, d);

输出例子:
10
代码：

function partialUsingArguments(fn) {
		//获取 partialUsingArguments 的第一个参数之后的全部参数
		var args1=Array.prototype.slice.call(arguments,1);
		//定义result
		var result=function(){
			//获取 result的调用参数
			var args2=Array.prototype.slice.call(arguments,0);
			//将参数整合到一个数组中
			var args=args1.concat(args2)
			return fn.apply(null,args);
		}
		//返回result
		return result;
 }

29、题目描述

已知 fn 为一个预定义函数，实现函数 curryIt，调用之后满足如下条件：
1、返回一个函数 a，a 的 length 属性值为 1（即显式声明 a 接收一个参数）
2、调用 a 之后，返回一个函数 b, b 的 length 属性值为 1
3、调用 b 之后，返回一个函数 c, c 的 length 属性值为 1
4、调用 c 之后，返回的结果与调用 fn 的返回值一致
5、fn 的参数依次为函数 a, b, c 的调用参数 
输入例子:
var fn = function (a, b, c) {return a + b + c}; curryIt(fn)(1)(2)(3);

输出例子:
6
代码：

function curryIt(fn) {
	return a=function(ra){
		return b=function(rb){
			return c=function(rc){
				return fn(ra,rb,rc);
			}
		}
	}
}
30、题目描述

返回参数 a 和 b 的逻辑或运算结果 
输入例子:
or(false, true)

输出例子:
true
代码：

function or(a, b) {
	return a||b;
}
31、题目描述

返回参数 a 和 b 的逻辑且运算结果 
输入例子:
and(false, true)

输出例子:
false
代码：

function and(a, b) {
	return a&&b;
}
32、题目描述

完成函数 createModule，调用之后满足如下要求：
1、返回一个对象
2、对象的 greeting 属性值等于 str1， name 属性值等于 str2
3、对象存在一个 sayIt 方法，该方法返回的字符串为 greeting属性值 + ', ' + name属性值
代码：

function createModule(str1, str2) {
	var obj={
        greeting:str1,
        name:str2,
        sayIt:function(){
        	return this.greeting+', '+this.name;
    	}
    };
    return obj;
}
33、题目描述

获取数字 num 二进制形式第 bit 位的值。注意：
1、bit 从 1 开始
2、返回 0 或 1
3、举例：2 的二进制为 10，第 1 位为 0，第 2 位为 1 
输入例子:
valueAtBit(128, 8)

输出例子:
1
代码：

function valueAtBit(num, bit) {
	var newnum=num.toString(2);
	return newnum[newnum.length-bit];
}

34、题目描述

给定二进制字符串，将其换算成对应的十进制数字 
输入例子:
base10('11000000')

输出例子:
192
代码：

function base10(str) {
	return parseInt(str,2);
}
35、题目描述

将给定数字转换成二进制字符串。如果字符串长度不足 8 位，则在前面补 0 到满8位。 
输入例子:
convertToBinary(65)

输出例子:
01000001
代码：

function convertToBinary(num) {
	var newnum=num.toString(2);
	var newlength=newnum.length;
	if(newnum.length<8){
		for(var i=0;i<8-newlength;i++)
			newnum="0"+newnum;
	}
	return newnum;
}
36、题目描述

求 a 和 b 相乘的值，a 和 b 可能是小数，需要注意结果的精度问题 
输入例子:
multiply(3, 0.0001)

输出例子:
0.0003
代码：

function multiply(a, b) {
	return a*b;
}
37、题目描述

将函数 fn 的执行上下文改为 obj，返回 fn 执行后的值 
输入例子:
alterContext(function() {return this.greeting + ', ' + this.name + '!'; }, {name: 'Rebecca', greeting: 'Yo' })

输出例子:
Yo, Rebecca!
代码：

function alterContext(fn, obj) {
	return fn.apply(obj);
}
或者：
function alterContext(fn, obj) {
	return fn.call(obj,obj);
}
38、题目描述

给定一个构造函数 constructor，请完成 alterObjects 方法，将 constructor 的所有实例的 greeting 属性指向给定的 greeting 变量。 
输入例子:
var C = function(name) {this.name = name; return this;}; var obj1 = new C('Rebecca'); alterObjects(C, 'What\'s up'); obj1.greeting;

输出例子:
What's up
代码：

function alterObjects(constructor, greeting) {
	constructor.prototype.greeting=greeting;
	return constructor.greeting;
}
39、题目描述

找出对象 obj 不在原型链上的属性(注意这题测试例子的冒号后面也有一个空格~)
1、返回数组，格式为 key: value
2、结果数组不要求顺序 
输入例子:
var C = function() {this.foo = 'bar'; this.baz = 'bim';}; C.prototype.bop = 'bip'; iterate(new C());

输出例子:
["foo: bar", "baz: bim"]
代码：

function iterate(obj) {
	var arr=[];
	for(var key in obj){
		if(obj.hasOwnProperty(key))//hasOwnProperty用于检验obj的属性key是否是自有的（而不是原型链的）
			arr.push(key+": "+obj[key]);
			}
	return arr;			
}
40、题目描述

给定字符串 str，检查其是否包含数字，包含返回 true，否则返回 false
输入例子:
containsNumber('abc123')

输出例子:
true
代码：

function containsNumber(str) {
	var reg=/\d/;
	return reg.test(str);
}
41、题目描述

给定字符串 str，检查其是否包含连续重复的字母（a-zA-Z），包含返回 true，否则返回 false 
输入例子:
containsRepeatingLetter('rattler')

输出例子:
true
代码：

function containsRepeatingLetter(str) {
     var reg=/([a-zA-Z])\1/;	//\1是对第一个括号中的内容的引用
	 return reg.test(str);
 }
42、题目描述

给定字符串 str，检查其是否以元音字母结尾
1、元音字母包括 a，e，i，o，u，以及对应的大写
2、包含返回 true，否则返回 false 
输入例子:
endsWithVowel('gorilla')

输出例子:
true
代码：

function endsWithVowel(str) {
	var reg=/[a,e,i,o,u]$/i;	// $表示匹配结尾，/i表示忽略大小写
	return reg.test(str);
}

43、题目描述

给定字符串 str，检查其是否包含连续3个都是数字
1、如果包含，返回最先出现的 3 个数字的字符串
2、如果不包含，返回 false 
输入例子:
captureThreeNumbers('9876543')

输出例子:
987
代码：

function captureThreeNumbers(str) {
	var reg=/\d{3}/;
	var matcher=str.match(reg);
	if(matcher)
		return matcher[0];
    else return false;
}
44、题目描述

给定字符串 str，检查其是否符合如下格式
1、XXX-XXX-XXXX
2、其中 X 为 Number 类型 
输入例子:
matchesPattern('800-555-1212')

输出例子:
true
代码：

function matchesPattern(str) {
	var reg=/^\d{3}-\d{3}-\d{4}$/;	//注意开头要加^结尾要加$
	return reg.test(str);
}
45、题目描述

给定字符串 str，检查其是否符合美元书写格式
1、以 $ 开始
2、整数部分，从个位起，满 3 个数字用 , 分隔
3、如果为小数，则小数部分长度为 2
4、正确的格式如：$1,023,032.03 或者 $2.03，错误的格式如：$3,432,12.12 或者 $34,344.3 
输入例子:
isUSD('$20,933,209.93')

输出例子:
true
代码：

function isUSD(str) {
	var reg=/^\$([1-9]\d{0,3})(,\d{3})*(\.\d{2})?$/;
    /*
	1、以 $ 开始: ^$
	2、$之后的第一组数字可能是0,1,2,3位: [1-9]\d{0~3}
	3、第二组开始之后的数字每组都是一个,加上三个数字：(,\d{3})*  //*表示可匹配0~n组
	4、如果有小数部分，格式为 .加上两个数字(注意对.进行转义；并且小数为结尾部分)：(\.\d{2})?$
	*/
	return reg.test(str);
}
